////
/// PX-LAYOUT-DESIGN
/// Defines grid layout
/// @group px-layout-design
////

/**
 * The Predix Experience layout system uses `box-sizing: border-box;` and
 * `display: flex;` to create an extremely powerful, flexible
 * alternative to the traditional grid system. The number of `.layout__items`
 * inside of each `.layout` will flexibly resize if the viewport changes.
 * You do not need to set widths on `.layout__item[s]` for the grid to function.
 * However, if you wish, you can override default grid behavior by assigning
 * widths to layout items with the classes found in `trumps.widths`.
 */

@import 'px-defaults-design/_settings.defaults.scss';
@import 'inuit-responsive-settings/_settings.responsive.scss';
@import 'inuit-responsive-tools/_tools.responsive.scss';

/// Prepend value for all generated classes
/// @group px-layout-design:variables:style
/// @type String [default]
$inuit-layout-namespace             : $inuit-namespace !default;

/// Minimum width of individual layout item
/// @group px-layout-design:variables:style
/// @type Number [default]
$inuit-layout-min-width             : 300px !default;

/// Produce CSS for layout with tiny gutters between layout items?
/// @group px-layout-design:variables:flag
/// @type Boolean [default]
$inuit-enable-layout--tiny          : false !default;

/// Produce CSS for layout with small gutters between layout items?
/// @group px-layout-design:variables:flag
/// @type Boolean [default]
$inuit-enable-layout--small         : false !default;

/// Produce CSS for layout with large gutters between layout items?
/// @group px-layout-design:variables:flag
/// @type Boolean [default]
$inuit-enable-layout--large         : false !default;

/// Produce CSS for layout with huge gutters between layout items?
/// @group px-layout-design:variables:flag
/// @type Boolean [default]
$inuit-enable-layout--huge          : false !default;

/// Produce CSS for layout with no gutters between layout items?
/// @group px-layout-design:variables:flag
/// @type Boolean [default]
$inuit-enable-layout--flush         : false !default;

/// Produce CSS for layout items reversed?
/// @group px-layout-design:variables:flag
/// @type Boolean [default]
$inuit-enable-layout--rev           : false !default;

/// Produce CSS to align layout items to the vertical centers of each other?
/// @group px-layout-design:variables:flag
/// @type Boolean [default]
$inuit-enable-layout--middle        : false !default;

/// Produce CSS to align layout items to the vertical bottoms of each other?
/// @group px-layout-design:variables:flag
/// @type Boolean [default]
$inuit-enable-layout--bottom        : false !default;

/// Produce CSS to align layout items to all be the same height?
/// @group px-layout-design:variables:flag
/// @type Boolean [default]
$inuit-enable-layout--full          : false !default;

/// Produce CSS to make layout items fill up from the right hand side?
/// @group px-layout-design:variables:flag
/// @type Boolean [default]
$inuit-enable-layout--right         : false !default;

/// Produce CSS to make the layout items fill up from the center outward?
/// @group px-layout-design:variables:flag
/// @type Boolean [default]
$inuit-enable-layout--center        : false !default;

/// Produce CSS to make an individual layout item fill up the height of its layout?
/// @group px-layout-design:variables:flag
/// @type Boolean [default]
$inuit-enable-layout__item--full    : false !default;

/// Produce CSS to make an individual layout item fill up from the center vertically?
/// @group px-layout-design:variables:flag
/// @type Boolean [default]
/// TODO: this should really be called "middle" since it's vertical rather than horizontal
$inuit-enable-layout__item--center  : false !default;

/// Produce CSS to make an individual layout item fill up from the bottom up?
/// @group px-layout-design:variables:flag
/// @type Boolean [default]
$inuit-enable-layout__item--bottom  : false !default;

/// Set a variable assuming that `box-sizing  : border-box;` is not set globally. If it has been previously been defined, the following variable will be overriden and will be set to `true`.
/// @group px-layout-design:variables:flag
/// @type Boolean [default]
$inuit-global-border-box            : false !default;

/**
 * Begin a layout group.
 */
.#{$inuit-layout-namespace}layout,
%#{$inuit-layout-namespace}layout {
    display: flex; /* [1] */
    flex-wrap: wrap;
    list-style: none;
    margin: 0;
    margin-left: -$inuit-base-spacing-unit;
    padding: 0;

    > {

      /**
       * 1. Space columns apart.
       * 2. Full-width unless told to behave otherwise.
       * 3. Required to combine fluid widths and fixed gutters.
       */
      .#{$inuit-layout-namespace}layout__item,
      %#{$inuit-layout-namespace}layout__item {
          padding-left: $inuit-base-spacing-unit; /* [1] */
          flex: 1; /* [2] */
          flex-basis: calculateRem($inuit-layout-min-width);

          &:nth-last-child(-n+4):first-child,
          &:nth-last-child(-n+4):first-child ~ .layout__item {
            flex-basis: calculateRem($inuit-layout-min-width * 1.5);
            @include media-query(desk) {
              flex-basis: 0;
            }
          }

          &:nth-last-child(-n+3):first-child,
          &:nth-last-child(-n+3):first-child ~ .layout__item {
            flex-basis: calculateRem($inuit-layout-min-width * 2);
            @include media-query(desk) {
              flex-basis: 0;
            }
          }

          @include media-query(desk) {
            flex-basis: 0;
          }

          @if $inuit-global-border-box == false {
            box-sizing: border-box; /* [3] */
          }

      }
    }

}



@if ($inuit-enable-layout--tiny == true) {

    /**
     * Layouts with tiny gutters.
     */

    .#{$inuit-layout-namespace}layout--tiny,
    %#{$inuit-layout-namespace}layout--tiny {
        margin-left: -($inuit-base-spacing-unit--tiny);

        > .#{$inuit-layout-namespace}layout__item,
        > %#{$inuit-layout-namespace}layout__item {
            padding-left: $inuit-base-spacing-unit--tiny;
        }

    }

}

@if ($inuit-enable-layout--small == true) {

    /**
     * Layouts with small gutters.
     */

    .#{$inuit-layout-namespace}layout--small,
    %#{$inuit-layout-namespace}layout--small {
        margin-left: -($inuit-base-spacing-unit--small);

        > .#{$inuit-layout-namespace}layout__item,
        > %#{$inuit-layout-namespace}layout__item {
            padding-left: $inuit-base-spacing-unit--small;
        }

    }

}

@if ($inuit-enable-layout--large == true) {

    /**
     * Layouts with large gutters.
     */

    .#{$inuit-layout-namespace}layout--large,
    %#{$inuit-layout-namespace}layout--large {
        margin-left: -($inuit-base-spacing-unit--large);

        > .#{$inuit-layout-namespace}layout__item,
        > %#{$inuit-layout-namespace}layout__item {
            padding-left: $inuit-base-spacing-unit--large;
        }

    }

}

@if ($inuit-enable-layout--huge == true) {

    /**
     * Layouts with huge gutters.
     */

    .#{$inuit-layout-namespace}layout--huge,
    %#{$inuit-layout-namespace}layout--huge {
        margin-left: -($inuit-base-spacing-unit--huge);

        > .#{$inuit-layout-namespace}layout__item,
        > %#{$inuit-layout-namespace}layout__item {
            padding-left: $inuit-base-spacing-unit--huge;
        }

    }

}





@if ($inuit-enable-layout--flush == true) {

    /**
     * Layouts with no gutters.
     */

    .#{$inuit-layout-namespace}layout--flush,
    %#{$inuit-layout-namespace}layout--flush {
        margin-left: 0;

        > .#{$inuit-layout-namespace}layout__item,
        > %#{$inuit-layout-namespace}layout__item {
            padding-left: 0;
        }

    }

}





@if ($inuit-enable-layout--rev == true) {

    /**
     * Reversed rendered order of layout items, e.g. items 1, 2, 3, 4 in your
     * markup will display in order 4, 3, 2, 1 on your page.
     */

    .#{$inuit-layout-namespace}layout--rev,
    %#{$inuit-layout-namespace}layout--rev {
        flex-direction: row-reverse;
    }

}





@if ($inuit-enable-layout--middle == true) {

    /**
     * Align layout items to the vertical centers of each other.
     */

    .#{$inuit-layout-namespace}layout--middle,
    %#{$inuit-layout-namespace}layout--middle {
        align-items: center;
    }

}

@if ($inuit-enable-layout--bottom == true) {

    /**
     * Align layout items to the vertical bottoms of each other.
     */

    .#{$inuit-layout-namespace}layout--bottom,
    %#{$inuit-layout-namespace}layout--bottom {
        align-items: flex-end;
    }

}

@if ($inuit-enable-layout--full == true) {

    /**
     * Align layout items to all be the same height.
     */

    .#{$inuit-layout-namespace}layout--full,
    %#{$inuit-layout-namespace}layout--full {
      > .layout__item {
        display: flex;
      }
    }

}

@if ($inuit-enable-layout--right == true) {

    /**
     * Make the layout items fill up from the right hand side.
     */

    .#{$inuit-layout-namespace}layout--right,
    %#{$inuit-layout-namespace}layout--right {
        justify-content: flex-end;
    }

}

@if ($inuit-enable-layout--center == true) {

    /**
     * Make the layout items fill up from the center outward.
     */

    .#{$inuit-layout-namespace}layout--center,
    %#{$inuit-layout-namespace}layout--center {
        justify-content: center;
    }

}



@if ($inuit-enable-layout__item--full == true) {

  /**
   * Make an individual layout item fill up the height of its layout.
   */

  .#{$inuit-layout-namespace}layout__item--full,
  %#{$inuit-layout-namespace}layout__item--full {
      align-self: stretch;
  }

}

@if ($inuit-enable-layout__item--center == true) {

    /**
     * Make an individual layout item fill up from the center vertically.
     */

    .#{$inuit-layout-namespace}layout__item--center,
    %#{$inuit-layout-namespace}layout__item--center {
        align-self: center;
    }

}

@if ($inuit-enable-layout__item--bottom == true) {

    /**
     * Make an individual layout item fill up from the bottom up.
     */

    .#{$inuit-layout-namespace}layout__item--bottom,
    %#{$inuit-layout-namespace}layout__item--bottom {
        align-self: flex-end;
    }

}
